install.packages('tinytext')
tinytex::pdflatex('test.tex')
install.packages("tinytex")
tinytex::pdflatex('test.tex')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(dplyr)
library(ggplot2)
library(nycflights13)
chlstrl=read_csv("./data/cholesterol.csv")
#Obtenemos una primera visualización de la estructura de datos que contiene la tabla
head(chlstrl)
#
str(chlstrl)
setwd("D:/MASTER_BIGDATA/FundamentosMatematicos/A1")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Este segundo, lo necesitaremos para acceder a los datos necesarios en el segundo apartado del último ejercicio
library(nycflights13)
#Cargamos los datos requeridos
chlstrl=read_csv("./data/cholesterol.csv")
#Obtenemos una primera visualización de la estructura de datos que contiene la tabla
head(chlstrl)
#Número de registros con el que trabajaremos
nrow(chlstrl)
#Número de variables con las que trabajaremos
ncol(chlstrl)
#Resumen con información básica adicional, como
str(chlstrl)
#Resumen con información básica adicional, como podría ser la tipología de datos que vamos a manejar
str(chlstrl)
#Sacamos el número de datos ausentes en toda la tabla
table(is.na(chlstrl)) #Tener en cuenta los TRUE
#Los localizamos en el DataFrame, analizando las posiciones que ocupan en la tabla
head(is.na(chlstrl)) #Imprimimos solo el head
#Hacemos la cuenta de entre los 403 registros de cuales son los que contienen algún valor nulo
table(complete.cases(chlstrl)) #Tener en cuenta los FALSE
#Con la siguiente instrucción, localizamos las filas con algún dato ausente
head(complete.cases(chlstrl)) # Imprimimos solo el head
#Finalmente, con el summary, obtenemos el número de nulos en cada una de las variables contempladas en la tabla
summary(chlstrl)
#Sacamos el mínimo, máximo,media,mediana, cuartiles y datos ausentes de la variable seleccionada
summary(chlstrl$chol)
#Calculamos el recorrido intercuartilico
IQR(chlstrl$chol, na.rm = TRUE)
#Los valores atípicos
unname(quantile(chlstrl$chol, probs = c(1/4, 3/4),na.rm=TRUE) + c(-1, 1) * 1.5 * IQR(chlstrl$chol, na.rm = TRUE))
#Desviación típica
sd(chlstrl$chol, na.rm = TRUE)
#Varianza
var(chlstrl$chol, na.rm = TRUE)
#FORMA 1
#Hacemos los cortes para realizar 10 intervalos, omitiendo los valores nulos de la variable
cortes = seq(min(chlstrl$chol,na.rm=TRUE), max(chlstrl$chol,na.rm=TRUE), length.out = 11)
#Graficamos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density)),
breaks=cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#FORMA 2
#En este caso, especificamos el número de intervalos con bins
#Lo dividiremos en 25 intervalos, en este caso sin especificar de forma explicita los intervalos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density)),
bins=25, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#FORMA 3
#En este último caso, simplemente dejamos que R defina los intervalos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density))
, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#Boxplot normal
#Podemos ver como los valores atípicos se grafican individualmente
ggplot(chlstrl) +
geom_boxplot(mapping = aes(y = chol), fill="orange")
#Violinplot
ggplot(chlstrl) +
geom_violin(mapping = aes(x=0, y = chol)) +
scale_x_discrete(breaks = c()) +
geom_boxplot(mapping = aes(y = chol), fill="green") +
geom_jitter(aes(x=0, y = chol),
position = position_jitter(w=0.05, h= 0), col="blue")
summary(chlstrl$gender)
#table(chlstrl$gender) con R básico
chlstrl %>%
count(gender) #Con dplyr
#prop.table(table(chlstrl$gender)) con R básico
chlstrl %>%
count(gender) %>%
mutate(gender, relFreq = prop.table(n), n=NULL) #Con dplyr
ggplot(chlstrl) +
geom_bar(aes(x=gender,fill=gender))
#Cambiamos las unidades de los valores asociados a las variables 'height' y 'weight'
(chlstrl=chlstrl %>%
mutate(height=height*0.0254,weight=weight*0.454))
#Cambiamos las unidades de los valores asociados a las variables 'height' y 'weight' sobreescribiendo chlstrl
(chlstrl=chlstrl %>%
mutate(height=height*0.0254,weight=weight*0.454))
#Cargamos los datos requeridos
chlstrl=read_csv("./data/cholesterol.csv")
#Cambiamos las unidades de los valores asociados a las variables 'height' y 'weight' sobreescribiendo chlstrl
(chlstrl=chlstrl %>%
mutate(height=height*0.0254,weight=weight*0.454))
#Añadimos la nueva columna especificada
(chlstrl=chlstrl %>%
mutate(BMI=weight/(height)^2))
#Añadimos la nueva columna especificada
(chlstrl=chlstrl %>%
mutate(ageGroup=cut(age,breaks=c(10,40,70,100))))
#Numero de observaciones para cada nivel de ageGroup
chlstrl %>%
count(ageGroup)
#De entre las mujeres, media del nivel de colesterol y de BMI en cada uno de esos grupos de edad
chlstrl %>%
filter(gender=='female') %>%
group_by(ageGroup) %>%
summarise(mediaCol=mean(chol,na.rm=TRUE),mediaBMI=mean(BMI,na.rm=TRUE))
cambioSigno=function(x=sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)) {
sol=list()
cont=0
for (i in 1:(length(x)-1)) {
if ((x[i]>0 && x[i+1]<0) | (x[i]<0 && x[i+1]>0)){
cont=cont+1
}
}
sol$vector=x
sol$cambSigno=cont
returnValue(sol)
}
cambioSigno(x)
set.seed(2019)
x = sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)
cat(paste0(x, sep=", "))
cambioSigno=function(x=sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)) {
sol=list()
cont=0
for (i in 1:(length(x)-1)) {
if ((x[i]>0 && x[i+1]<0) | (x[i]<0 && x[i+1]>0)){
cont=cont+1
}
}
sol$vector=x
sol$cambSigno=cont
returnValue(sol)
}
cambioSigno(x)
#Si no introduces nada
cambioSigno()
cambiosSignoPos=function(x=sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)) {
sol=list()
vectorPos=c()
for (i in 1:(length(x)-1)) {
if ((x[i]>0 && x[i+1]<0) | (x[i]<0 && x[i+1]>0)){
vectorPos=c(vectorPos,i+1)
}
}
sol$vector=x
sol$posiciones=vectorPos
returnValue(sol)
}
cambiosSignoPos(x)
#Si no introduces nada
cambioSigno()
#Vemos la estructura de la tabla con los datos que se van a trabajar
head(mpg)
g1=ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=3) +
geom_smooth(se=FALSE,size=1.5)
g2=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(size=3) +
geom_smooth(aes(group = drv),se=FALSE,size=1.5)
g3=ggplot(data = mpg,aes(x = displ, y = hwy,color=drv)) +
geom_point(size=3) +
geom_smooth(se=FALSE,size=1.5)
g4=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv),size=3) +
geom_smooth(se=FALSE,size=1.5)
g5=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv),size=3) +
geom_smooth(aes(linetype=drv),se=FALSE,size=1.5)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size = 4, stroke = 3)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
library(gridExtra)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g1=ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=FALSE)
g2=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(group = drv),se=FALSE)
g3=ggplot(data = mpg,aes(x = displ, y = hwy,color=drv)) +
geom_point() +
geom_smooth(se=FALSE)
g4=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv)) +
geom_smooth(se=FALSE)
g5=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv)) +
geom_smooth(aes(linetype=drv),se=FALSE)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white", stroke = 1)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=3 stroke = 2)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=3, stroke = 2)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2, stroke = 2)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2.5, stroke = 2)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2.5, stroke = 1.5)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2.5, stroke = 1.75)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2.5, stroke = 1.5)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
#Vemos la estructura de la tabla con los datos que se van a trabajar
head(flights)
flights %>%
filter(arr_delay>=2*60)
flights %>%
filter(dest %in% c('HOU','IAH'))
flights %>%
filter(carrier %in% c('UA','AA','DL'))
flights %>%
filter(month %in% c(7:9))
flights %>%
filter(dep_delay<=0,arr_delay>2*60)
flights %>%
filter(dep_delay>=60,(arr_delay-dep_delay)<=-30)
flights %>%
filter(dep_time %in% c(0:600))
flights %>%
filter(dep_delay>=60,(arr_delay-dep_delay)<-30)
flights %>%
filter(dep_delay>=60,(arr_delay-dep_delay)<(-30))
flights %>%
filter(dep_time ==2400 | dep_time<=600)
library(tidyverse) # Ya tiene incorporadas dplyr y ggplot
library(gridExtra)
#Este tercero, lo necesitaremos para acceder a los datos necesarios en el segundo apartado del último ejercicio
library(nycflights13)
#Cargamos los datos requeridos
chlstrl=read_csv("./data/cholesterol.csv")
#Obtenemos una primera visualización de la estructura de datos que contiene la tabla
head(chlstrl)
#Número de registros con el que trabajaremos
nrow(chlstrl)
#Número de variables con las que trabajaremos
ncol(chlstrl)
#Resumen con información básica adicional, como podría ser la tipología de datos que vamos a manejar
str(chlstrl)
#Sacamos el número de datos ausentes en toda la tabla, detectando de esta forma su presencia
table(is.na(chlstrl)) #Tener en cuenta los TRUE
#Los localizamos en el DataFrame, analizando las posiciones que ocupan
head(is.na(chlstrl)) #Imprimimos solo el head
#Hacemos la cuenta de entre los 403 registros, de cuales son los que contienen algún valor nulo
table(complete.cases(chlstrl)) #Tener en cuenta los FALSE
#Con la siguiente instrucción, localizamos las filas con algún dato ausente
head(complete.cases(chlstrl)) # Imprimimos solo el head
#Finalmente, con el summary, obtenemos el número de nulos en cada una de las variables contempladas en la tabla
summary(chlstrl)
#Sacamos el mínimo, máximo,media,mediana, cuartiles y datos ausentes de la variable seleccionada
summary(chlstrl$chol)
#Calculamos el recorrido intercuartilico
IQR(chlstrl$chol, na.rm = TRUE)
#Los valores atípicos
unname(quantile(chlstrl$chol, probs = c(1/4, 3/4),na.rm=TRUE) + c(-1, 1) * 1.5 * IQR(chlstrl$chol, na.rm = TRUE))
#Calculamos el recorrido intercuartilico
IQR(chlstrl$chol, na.rm = TRUE)
#Los valores atípicos
unname(quantile(chlstrl$chol, probs = c(1/4, 3/4),na.rm=TRUE) + c(-1, 1) * 1.5 * IQR(chlstrl$chol, na.rm = TRUE))
#Desviación típica
sd(chlstrl$chol, na.rm = TRUE)
#Varianza
var(chlstrl$chol, na.rm = TRUE)
#FORMA 1
#Hacemos los cortes para realizar 10 intervalos, omitiendo los valores nulos de la variable
cortes = seq(min(chlstrl$chol,na.rm=TRUE), max(chlstrl$chol,na.rm=TRUE), length.out = 11)
#Graficamos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density)),
breaks=cortes, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#FORMA 2
#En este caso, especificamos el número de intervalos con bins
#Lo dividiremos en 25 intervalos, en este caso sin especificar de forma explicita los intervalos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density)),
bins=25, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#FORMA 3
#En este último caso, simplemente dejamos que R defina los intervalos
ggplot(chlstrl, aes(x = chol)) +
geom_histogram(aes(y=stat(density))
, fill = "orange", color="black")  +
geom_density(color="red", size=1.5)
#Boxplot normal
#Podemos ver como los valores atípicos se grafican individualmente
ggplot(chlstrl) +
geom_boxplot(mapping = aes(y = chol), fill="orange")
#Violinplot
ggplot(chlstrl) +
geom_violin(mapping = aes(x=0, y = chol)) +
scale_x_discrete(breaks = c()) +
geom_boxplot(mapping = aes(y = chol), fill="green") +
geom_jitter(aes(x=0, y = chol),
position = position_jitter(w=0.05, h= 0), col="blue")
summary(chlstrl$gender)
#table(chlstrl$gender) con R básico
chlstrl %>%
count(gender) #Con dplyr
#prop.table(table(chlstrl$gender)) con R básico
chlstrl %>%
count(gender) %>%
mutate(gender, relFreq = prop.table(n), n=NULL) #Con dplyr
ggplot(chlstrl) +
geom_bar(aes(x=gender,fill=gender))
#Cambiamos las unidades de los valores asociados a las variables 'height' y 'weight' sobreescribiendo chlstrl
(chlstrl=chlstrl %>%
mutate(height=height*0.0254,weight=weight*0.454))
#Añadimos la nueva columna especificada
(chlstrl=chlstrl %>%
mutate(BMI=weight/(height)^2))
#Añadimos la nueva columna especificada
(chlstrl=chlstrl %>%
mutate(ageGroup=cut(age,breaks=c(10,40,70,100))))
#Numero de observaciones para cada nivel de ageGroup
chlstrl %>%
count(ageGroup)
#De entre las mujeres, media del nivel de colesterol y de BMI en cada uno de esos grupos de edad
chlstrl %>%
filter(gender=='female') %>%
group_by(ageGroup) %>%
summarise(mediaCol=mean(chol,na.rm=TRUE),mediaBMI=mean(BMI,na.rm=TRUE))
set.seed(2019)
x = sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)
cat(paste0(x, sep=", "))
cambioSigno=function(x=sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)) {
sol=list()
cont=0
for (i in 1:(length(x)-1)) {
if ((x[i]>0 && x[i+1]<0) | (x[i]<0 && x[i+1]>0)){
cont=cont+1
}
}
sol$vector=x
sol$cambSigno=cont
returnValue(sol)
}
cambioSigno(x)
#Si no introduces nada
cambioSigno()
cambiosSignoPos=function(x=sample(c(-1, 1), 9, replace = TRUE) * sample(1:20, 9, replace = TRUE)) {
sol=list()
vectorPos=c()
for (i in 1:(length(x)-1)) {
if ((x[i]>0 && x[i+1]<0) | (x[i]<0 && x[i+1]>0)){
vectorPos=c(vectorPos,i+1)
}
}
sol$vector=x
sol$posiciones=vectorPos
returnValue(sol)
}
cambiosSignoPos(x)
#Si no introduces nada
cambioSigno()
#Vemos la estructura de la tabla con los datos que se van a trabajar
head(mpg)
g1=ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se=FALSE)
g2=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(group = drv),se=FALSE)
g3=ggplot(data = mpg,aes(x = displ, y = hwy,color=drv)) +
geom_point() +
geom_smooth(se=FALSE)
g4=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv)) +
geom_smooth(se=FALSE)
g5=ggplot(data = mpg,aes(x = displ, y = hwy)) +
geom_point(aes(color=drv)) +
geom_smooth(aes(linetype=drv),se=FALSE)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size=2.5, stroke = 1.5)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
#Vemos la estructura de la tabla con los datos que se van a trabajar
head(flights)
flights %>%
filter(arr_delay>=2*60)
flights %>%
filter(dest %in% c('HOU','IAH'))
flights %>%
filter(carrier %in% c('UA','AA','DL'))
flights %>%
filter(month %in% c(7:9))
flights %>%
filter(dep_delay<=0,arr_delay>2*60)
flights %>%
filter(dep_delay>=60,(arr_delay-dep_delay)<(-30))
flights %>%
filter(dep_time ==2400 | dep_time<=600)
flights %>%
filter(dep_time ==2400 | dep_time<=600)
flights %>%
filter(dep_time ==2400)
flights %>%
filter(dep_time ==2400 | dep_time<=600)
flights %>%
filter(dep_time ==2400 | dep_time<=600)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size= , stroke = 1.5)
g6=ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, fill=drv), shape = 21,color="white",size= 2.5, stroke = 1.5)
grid.arrange(g1, g2, g3, g4, g5, g6, nrow = 3)
#Los valores atípicos
unname(quantile(chlstrl$chol, probs = c(1/4, 3/4),na.rm=TRUE)
+ c(-1, 1) * 1.5 * IQR(chlstrl$chol, na.rm = TRUE))
